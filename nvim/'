let g:latex_to_unicode_auto = 1
let g:LanguageClient_diagnosticsEnable = 0
let g:default_julia_version = '1.3'
let g:LanguageClient_useVirtualText = 'No'
let g:LanguageClient_serverCommands['julia'] = [
        \   'julia',
        \   '--startup-file=no',
        \   '--history-file=no',
        \   '-e', '
        \       using LanguageServer;
        \       using Pkg;
        \       import StaticLint;
        \       import SymbolServer;
        \       env_path = dirname(Pkg.Types.Context().env.project_file);
        \       debug = false; 
        \       
        \       server = LanguageServer.LanguageServerInstance(stdin, stdout, debug, env_path, "", Dict());
        \       server.runlinter = true;
        \       run(server);
        \   ']
" let g:LanguageClient_serverCommands['julia'] = [
"             \     'julia',
"             \     '--startup-file=no', 
"             \     '--history-file=no', 
"             \     '-e', '
"             \         using LanguageServer, Pkg;
"             \         import StaticLint;
"             \         import SymbolServer;
"             \         prj_path = dirname(first(filter(!isnothing, [
"             \         	  Base.current_project(pwd())
"             \             Pkg.Types.Context().env.project_file
"             \         ])));
"             \         debug = true; 
"             \         server = LanguageServer.LanguageServerInstance(stdin, stdout, 
"             \             debug, prj_path, string(), Dict()); 
"             \         server.runlinter = true; 
"             \         run(server);
"             \     ']
call RegisterKeybindingsLSP('julia')
